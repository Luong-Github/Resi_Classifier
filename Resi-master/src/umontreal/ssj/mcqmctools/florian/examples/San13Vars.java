package umontreal.ssj.mcqmctools.florian.examples;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

import umontreal.ssj.mcqmctools.MonteCarloModelDoubleArray;
import umontreal.ssj.probdist.ContinuousDistribution;
import umontreal.ssj.probdist.DistributionFactory;
import umontreal.ssj.rng.RandomStream;

/**
 * With this class one can generate several random variates involved in the
 * estimation of the longest path of a specific stochastic activity network with
 * 9 nodes and 13 links, taken from Elmaghraby (1977) and used again in L'Ecuyer
 * and Lemieux (2000), "Variance Reduction via Lattice Rules". The random
 * variables that are generated by this class are the lengths of the paths. This
 * can, e.g., be used for estimating the density of the longest path with a
 * likelihood-ratio density estimator.
 * 
 * @author florian
 *
 */

public class San13Vars implements MonteCarloModelDoubleArray {

	double[] performance;
	ContinuousDistribution[] dist;

	/**
	 * A constructor which reads the link length distributions in a file.
	 * 
	 * @param fileName file containing the distributions for each link.
	 * @throws IOException
	 */
	public San13Vars(String fileName) throws IOException {
		performance = new double[13];
		dist = new ContinuousDistribution[13];
		readDistributions(fileName);
	}

	/**
	 * Function that reads distributions from a file.
	 * 
	 * @param fileName file containing various distributions.
	 * @throws IOException
	 */
	public void readDistributions(String fileName) throws IOException {
		// Reads data and construct arrays.
		BufferedReader input = new BufferedReader(new FileReader(fileName));
		Scanner scan = new Scanner(input);
		for (int k = 0; k < 13; k++) {
			dist[k] = DistributionFactory.getContinuousDistribution(scan.nextLine());
			// gen[k] = new RandomVariateGen (stream, dist);
		}
		scan.close();
	}

	@Override
	public void simulate(RandomStream stream) {
		for (int k = 0; k < 13; k++) {
			performance[k] = dist[k].inverseF(stream.nextDouble());
			if (performance[k] < 0.0)
				performance[k] = 0.0;
		}
	}

	@Override
	public double[] getPerformance() {
		return performance;
	}

	@Override
	public int getPerformanceDim() {
		return 13;
	}

	@Override
	public String toString() {
		return "SAN13";
	}

}
